/*
 * generated by Xtext 2.10.0
 */
package fr.inria.diverse.docl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DOclGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourceOclModelParserRuleCall_4_0 = (RuleCall)cSourceAssignment_4.eContents().get(0);
		private final Keyword cInputKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInputOclModelParserRuleCall_6_0 = (RuleCall)cInputAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cImportsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_7_0_0 = (RuleCall)cImportsAssignment_7_0.eContents().get(0);
		private final Assignment cImportsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_7_1_0 = (RuleCall)cImportsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cElementsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cElementsModuleElementParserRuleCall_8_0_0 = (RuleCall)cElementsAssignment_8_0.eContents().get(0);
		private final Assignment cElementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cElementsModuleElementParserRuleCall_8_1_0 = (RuleCall)cElementsAssignment_8_1.eContents().get(0);
		
		/// *
		// * *********************************************
		// * 						Header
		// * *********************************************
		// * / Module:
		//	{Module}
		//	'module' name=ID
		//	'@@source' source=OclModel
		//	'@@input' input=OclModel (imports+=Import imports+=Import*)? (elements+=ModuleElement elements+=ModuleElement*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Module} 'module' name=ID '@@source' source=OclModel '@@input' input=OclModel (imports+=Import imports+=Import*)?
		//(elements+=ModuleElement elements+=ModuleElement*)?
		public Group getGroup() { return cGroup; }
		
		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }
		
		//'module'
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'@@source'
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }
		
		//source=OclModel
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//OclModel
		public RuleCall getSourceOclModelParserRuleCall_4_0() { return cSourceOclModelParserRuleCall_4_0; }
		
		//'@@input'
		public Keyword getInputKeyword_5() { return cInputKeyword_5; }
		
		//input=OclModel
		public Assignment getInputAssignment_6() { return cInputAssignment_6; }
		
		//OclModel
		public RuleCall getInputOclModelParserRuleCall_6_0() { return cInputOclModelParserRuleCall_6_0; }
		
		//(imports+=Import imports+=Import*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//imports+=Import
		public Assignment getImportsAssignment_7_0() { return cImportsAssignment_7_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_7_0_0() { return cImportsImportParserRuleCall_7_0_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_7_1() { return cImportsAssignment_7_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_7_1_0() { return cImportsImportParserRuleCall_7_1_0; }
		
		//(elements+=ModuleElement elements+=ModuleElement*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//elements+=ModuleElement
		public Assignment getElementsAssignment_8_0() { return cElementsAssignment_8_0; }
		
		//ModuleElement
		public RuleCall getElementsModuleElementParserRuleCall_8_0_0() { return cElementsModuleElementParserRuleCall_8_0_0; }
		
		//elements+=ModuleElement*
		public Assignment getElementsAssignment_8_1() { return cElementsAssignment_8_1; }
		
		//ModuleElement
		public RuleCall getElementsModuleElementParserRuleCall_8_1_0() { return cElementsModuleElementParserRuleCall_8_1_0; }
	}
	public class OclModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OclModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUriURI_ParserRuleCall_1_0 = (RuleCall)cUriAssignment_1.eContents().get(0);
		
		//OclModel:
		//	name=ID
		//	uri=URI_?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID uri=URI_?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//uri=URI_?
		public Assignment getUriAssignment_1() { return cUriAssignment_1; }
		
		//URI_
		public RuleCall getUriURI_ParserRuleCall_1_0() { return cUriURI_ParserRuleCall_1_0; }
	}
	public class URI_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.URI_");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUriKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchemeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchemeSCHEMETerminalRuleCall_1_0 = (RuleCall)cSchemeAssignment_1.eContents().get(0);
		private final Keyword cColonSolidusSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAuthorityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAuthorityAUTHORITYParserRuleCall_3_0 = (RuleCall)cAuthorityAssignment_3.eContents().get(0);
		private final Keyword cSolidusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFragment_Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFragment_FRAGMENTParserRuleCall_5_0 = (RuleCall)cFragment_Assignment_5.eContents().get(0);
		
		//URI_:
		//	'uri=' scheme=SCHEME '://' // Scheme
		//	authority=AUTHORITY '/' // 
		//	fragment_=FRAGMENT // 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'uri=' scheme=SCHEME '://' // Scheme
		//authority=AUTHORITY '/' // 
		//fragment_=FRAGMENT
		public Group getGroup() { return cGroup; }
		
		//'uri='
		public Keyword getUriKeyword_0() { return cUriKeyword_0; }
		
		//scheme=SCHEME
		public Assignment getSchemeAssignment_1() { return cSchemeAssignment_1; }
		
		//SCHEME
		public RuleCall getSchemeSCHEMETerminalRuleCall_1_0() { return cSchemeSCHEMETerminalRuleCall_1_0; }
		
		//'://'
		public Keyword getColonSolidusSolidusKeyword_2() { return cColonSolidusSolidusKeyword_2; }
		
		//// Scheme
		//authority=AUTHORITY
		public Assignment getAuthorityAssignment_3() { return cAuthorityAssignment_3; }
		
		//AUTHORITY
		public RuleCall getAuthorityAUTHORITYParserRuleCall_3_0() { return cAuthorityAUTHORITYParserRuleCall_3_0; }
		
		//'/'
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }
		
		//// 
		//fragment_=FRAGMENT
		public Assignment getFragment_Assignment_5() { return cFragment_Assignment_5; }
		
		//FRAGMENT
		public RuleCall getFragment_FRAGMENTParserRuleCall_5_0() { return cFragment_FRAGMENTParserRuleCall_5_0; }
	}
	public class FRAGMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.FRAGMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FRAGMENT:
		//	ID ('/' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('/' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('/' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AUTHORITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.AUTHORITY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//AUTHORITY:
		//	ID ('.' ID)* (':' INT)? //TODO limit the number of characters 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)* (':' INT)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//(':' INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Import:
		//	{Import}
		//	'imports'
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Import} 'imports' name=ID
		public Group getGroup() { return cGroup; }
		
		//{Import}
		public Action getImportAction_0() { return cImportAction_0; }
		
		//'imports'
		public Keyword getImportsKeyword_1() { return cImportsKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.ModuleElement");
		private final RuleCall cQueryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ModuleElement:
		//	Query // TODO extend this with additional moduleElements
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Query
		public RuleCall getQueryParserRuleCall() { return cQueryParserRuleCall; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQueryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyOclExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Query:
		//	{Query}
		//	'query' name=ID ':' body=OclExpression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Query} 'query' name=ID ':' body=OclExpression ';'
		public Group getGroup() { return cGroup; }
		
		//{Query}
		public Action getQueryAction_0() { return cQueryAction_0; }
		
		//'query'
		public Keyword getQueryKeyword_1() { return cQueryKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_4_0() { return cBodyOclExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// **
		// * ********************************************
		// * 					Operators
		// * *******************************************
		// * / UnaryOperator:
		//	'-' | 'not' // 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | 'not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}
	public class MultiOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.MultiOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MultiOperator:
		//	'*' | '/' // multiplication
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class AdditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.AdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditionOperator:
		//	'+' | '-' // Addition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ComparisonOperator:
		//	'>' | '<' | '>=' | '<=' //comparison
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '<' | '>=' | '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
	}
	public class EqualityOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.EqualityOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqualityOperator:
		//	'=' | '<>' // Equality
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
	}
	public class AndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.AndOperator");
		private final Keyword cAndKeyword = (Keyword)rule.eContents().get(1);
		
		//AndOperator:
		//	'and';
		@Override public ParserRule getRule() { return rule; }
		
		//'and'
		public Keyword getAndKeyword() { return cAndKeyword; }
	}
	public class OrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OrOperator");
		private final Keyword cOrKeyword = (Keyword)rule.eContents().get(1);
		
		//OrOperator:
		//	'or';
		@Override public ParserRule getRule() { return rule; }
		
		//'or'
		public Keyword getOrKeyword() { return cOrKeyword; }
	}
	public class XorOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.XorOperator");
		private final Keyword cXorKeyword = (Keyword)rule.eContents().get(1);
		
		//XorOperator:
		//	'xor';
		@Override public ParserRule getRule() { return rule; }
		
		//'xor'
		public Keyword getXorKeyword() { return cXorKeyword; }
	}
	public class ImpliesOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.ImpliesOperator");
		private final Keyword cImpliesKeyword = (Keyword)rule.eContents().get(1);
		
		//ImpliesOperator:
		//	'implies';
		@Override public ParserRule getRule() { return rule; }
		
		//'implies'
		public Keyword getImpliesKeyword() { return cImpliesKeyword; }
	}
	public class BooleanOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXorOperatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImpliesOperatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BooleanOperator:
		//	XorOperator | OrOperator | AndOperator | ImpliesOperator // Boolean
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//XorOperator | OrOperator | AndOperator | ImpliesOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XorOperator
		public RuleCall getXorOperatorParserRuleCall_0() { return cXorOperatorParserRuleCall_0; }
		
		//OrOperator
		public RuleCall getOrOperatorParserRuleCall_1() { return cOrOperatorParserRuleCall_1; }
		
		//AndOperator
		public RuleCall getAndOperatorParserRuleCall_2() { return cAndOperatorParserRuleCall_2; }
		
		//ImpliesOperator
		public RuleCall getImpliesOperatorParserRuleCall_3() { return cImpliesOperatorParserRuleCall_3; }
	}
	public class NavigationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NavigationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//NavigationOperator:
		//	'.' | '->';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' | '->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
	}
	public class CollectionOperationIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.CollectionOperationID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIncludesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExcludesKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCountKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIncludesAllKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExcludesAllKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cIsEmptyKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotEmptyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cSumKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAsBagKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAsSetKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAsSequenceKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cUnionKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cFlattenKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cAppendKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cPrependKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cInsertAtKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSubSequenceKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cAtKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cIndexOfKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cFirstKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cLastKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cIncludingKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cExcludingKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		
		//CollectionOperationID:
		//	'size'
		//	| 'includes'
		//	| 'excludes'
		//	| 'count'
		//	| 'includesAll'
		//	| 'excludesAll'
		//	| 'isEmpty'
		//	| 'notEmpty'
		//	| 'sum'
		//	| 'asBag'
		//	| 'asSet'
		//	| 'asSequence'
		//	| 'union'
		//	| 'flatten'
		//	| 'append'
		//	| 'prepend'
		//	| 'insertAt'
		//	| 'subSequence'
		//	| 'at'
		//	| 'indexOf'
		//	| 'first'
		//	| 'last'
		//	| 'including'
		//	| 'excluding';
		@Override public ParserRule getRule() { return rule; }
		
		//'size' | 'includes' | 'excludes' | 'count' | 'includesAll' | 'excludesAll' | 'isEmpty' | 'notEmpty' | 'sum' | 'asBag' |
		//'asSet' | 'asSequence' | 'union' | 'flatten' | 'append' | 'prepend' | 'insertAt' | 'subSequence' | 'at' | 'indexOf' |
		//'first' | 'last' | 'including' | 'excluding'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//'includes'
		public Keyword getIncludesKeyword_1() { return cIncludesKeyword_1; }
		
		//'excludes'
		public Keyword getExcludesKeyword_2() { return cExcludesKeyword_2; }
		
		//'count'
		public Keyword getCountKeyword_3() { return cCountKeyword_3; }
		
		//'includesAll'
		public Keyword getIncludesAllKeyword_4() { return cIncludesAllKeyword_4; }
		
		//'excludesAll'
		public Keyword getExcludesAllKeyword_5() { return cExcludesAllKeyword_5; }
		
		//'isEmpty'
		public Keyword getIsEmptyKeyword_6() { return cIsEmptyKeyword_6; }
		
		//'notEmpty'
		public Keyword getNotEmptyKeyword_7() { return cNotEmptyKeyword_7; }
		
		//'sum'
		public Keyword getSumKeyword_8() { return cSumKeyword_8; }
		
		//'asBag'
		public Keyword getAsBagKeyword_9() { return cAsBagKeyword_9; }
		
		//'asSet'
		public Keyword getAsSetKeyword_10() { return cAsSetKeyword_10; }
		
		//'asSequence'
		public Keyword getAsSequenceKeyword_11() { return cAsSequenceKeyword_11; }
		
		//'union'
		public Keyword getUnionKeyword_12() { return cUnionKeyword_12; }
		
		//'flatten'
		public Keyword getFlattenKeyword_13() { return cFlattenKeyword_13; }
		
		//'append'
		public Keyword getAppendKeyword_14() { return cAppendKeyword_14; }
		
		//'prepend'
		public Keyword getPrependKeyword_15() { return cPrependKeyword_15; }
		
		//'insertAt'
		public Keyword getInsertAtKeyword_16() { return cInsertAtKeyword_16; }
		
		//'subSequence'
		public Keyword getSubSequenceKeyword_17() { return cSubSequenceKeyword_17; }
		
		//'at'
		public Keyword getAtKeyword_18() { return cAtKeyword_18; }
		
		//'indexOf'
		public Keyword getIndexOfKeyword_19() { return cIndexOfKeyword_19; }
		
		//'first'
		public Keyword getFirstKeyword_20() { return cFirstKeyword_20; }
		
		//'last'
		public Keyword getLastKeyword_21() { return cLastKeyword_21; }
		
		//'including'
		public Keyword getIncludingKeyword_22() { return cIncludingKeyword_22; }
		
		//'excluding'
		public Keyword getExcludingKeyword_23() { return cExcludingKeyword_23; }
	}
	public class IterativeOperationIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.IterativeOperationID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExistsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cForAllKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsUniqueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAnyKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOneKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCollectKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSelectKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRejectKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//IterativeOperationID:
		//	'exists'
		//	| 'forAll'
		//	| 'isUnique'
		//	| 'any'
		//	| 'one'
		//	| 'collect'
		//	| 'select'
		//	| 'reject';
		@Override public ParserRule getRule() { return rule; }
		
		//'exists' | 'forAll' | 'isUnique' | 'any' | 'one' | 'collect' | 'select' | 'reject'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'exists'
		public Keyword getExistsKeyword_0() { return cExistsKeyword_0; }
		
		//'forAll'
		public Keyword getForAllKeyword_1() { return cForAllKeyword_1; }
		
		//'isUnique'
		public Keyword getIsUniqueKeyword_2() { return cIsUniqueKeyword_2; }
		
		//'any'
		public Keyword getAnyKeyword_3() { return cAnyKeyword_3; }
		
		//'one'
		public Keyword getOneKeyword_4() { return cOneKeyword_4; }
		
		//'collect'
		public Keyword getCollectKeyword_5() { return cCollectKeyword_5; }
		
		//'select'
		public Keyword getSelectKeyword_6() { return cSelectKeyword_6; }
		
		//'reject'
		public Keyword getRejectKeyword_7() { return cRejectKeyword_7; }
	}
	public class OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImpliesOpExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLetExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnaryOpExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// **
		// * ********************************************
		// * 					Expressions
		// * ********************************************
		// * 
		// * Using the delegate pattern to respect rule precedence
		// * / OclExpression:
		//	ImpliesOpExp
		//	| LetExp
		//	| UnaryOpExp;
		@Override public ParserRule getRule() { return rule; }
		
		//ImpliesOpExp | LetExp | UnaryOpExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ImpliesOpExp
		public RuleCall getImpliesOpExpParserRuleCall_0() { return cImpliesOpExpParserRuleCall_0; }
		
		//LetExp
		public RuleCall getLetExpParserRuleCall_1() { return cLetExpParserRuleCall_1; }
		
		//UnaryOpExp
		public RuleCall getUnaryOpExpParserRuleCall_2() { return cUnaryOpExpParserRuleCall_2; }
	}
	public class LetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.LetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLetKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLocalVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInOclExpressionParserRuleCall_3_0 = (RuleCall)cInAssignment_3.eContents().get(0);
		
		//LetExp OclExpression:
		//	name='let' variable=LocalVariable 'in' in=OclExpression
		@Override public ParserRule getRule() { return rule; }
		
		//name='let' variable=LocalVariable 'in' in=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name='let'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'let'
		public Keyword getNameLetKeyword_0_0() { return cNameLetKeyword_0_0; }
		
		//variable=LocalVariable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LocalVariable
		public RuleCall getVariableLocalVariableParserRuleCall_1_0() { return cVariableLocalVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//in=OclExpression
		public Assignment getInAssignment_3() { return cInAssignment_3; }
		
		//OclExpression
		public RuleCall getInOclExpressionParserRuleCall_3_0() { return cInOclExpressionParserRuleCall_3_0; }
	}
	public class UnaryOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.UnaryOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameUnaryOperatorParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetOclExpressionParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//UnaryOpExp OclExpression:
		//	name=UnaryOperator target=OclExpression
		@Override public ParserRule getRule() { return rule; }
		
		//name=UnaryOperator target=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=UnaryOperator
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//UnaryOperator
		public RuleCall getNameUnaryOperatorParserRuleCall_0_0() { return cNameUnaryOperatorParserRuleCall_0_0; }
		
		//target=OclExpression
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//OclExpression
		public RuleCall getTargetOclExpressionParserRuleCall_1_0() { return cTargetOclExpressionParserRuleCall_1_0; }
	}
	public class ImpliesOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.ImpliesOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBoolOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameImpliesOperatorParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetXorOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//ImpliesOpExp OclExpression:
		//	XorOpExp ({BoolOpCallExp.source=current} name=ImpliesOperator target=XorOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//XorOpExp ({BoolOpCallExp.source=current} name=ImpliesOperator target=XorOpExp)*
		public Group getGroup() { return cGroup; }
		
		//XorOpExp
		public RuleCall getXorOpExpParserRuleCall_0() { return cXorOpExpParserRuleCall_0; }
		
		//({BoolOpCallExp.source=current} name=ImpliesOperator target=XorOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolOpCallExp.source=current}
		public Action getBoolOpCallExpSourceAction_1_0() { return cBoolOpCallExpSourceAction_1_0; }
		
		//name=ImpliesOperator
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ImpliesOperator
		public RuleCall getNameImpliesOperatorParserRuleCall_1_1_0() { return cNameImpliesOperatorParserRuleCall_1_1_0; }
		
		//target=XorOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//XorOpExp
		public RuleCall getTargetXorOpExpParserRuleCall_1_2_0() { return cTargetXorOpExpParserRuleCall_1_2_0; }
	}
	public class XorOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.XorOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBoolOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameXorOperatorParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetOrOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//XorOpExp OclExpression:
		//	OrOpExp ({BoolOpCallExp.source=current} name=XorOperator target=OrOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//OrOpExp ({BoolOpCallExp.source=current} name=XorOperator target=OrOpExp)*
		public Group getGroup() { return cGroup; }
		
		//OrOpExp
		public RuleCall getOrOpExpParserRuleCall_0() { return cOrOpExpParserRuleCall_0; }
		
		//({BoolOpCallExp.source=current} name=XorOperator target=OrOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolOpCallExp.source=current}
		public Action getBoolOpCallExpSourceAction_1_0() { return cBoolOpCallExpSourceAction_1_0; }
		
		//name=XorOperator
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//XorOperator
		public RuleCall getNameXorOperatorParserRuleCall_1_1_0() { return cNameXorOperatorParserRuleCall_1_1_0; }
		
		//target=OrOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//OrOpExp
		public RuleCall getTargetOrOpExpParserRuleCall_1_2_0() { return cTargetOrOpExpParserRuleCall_1_2_0; }
	}
	public class OrOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OrOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBoolOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameOrOperatorParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetAndOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//OrOpExp OclExpression:
		//	AndOpExp ({BoolOpCallExp.source=current} name=OrOperator target=AndOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//AndOpExp ({BoolOpCallExp.source=current} name=OrOperator target=AndOpExp)*
		public Group getGroup() { return cGroup; }
		
		//AndOpExp
		public RuleCall getAndOpExpParserRuleCall_0() { return cAndOpExpParserRuleCall_0; }
		
		//({BoolOpCallExp.source=current} name=OrOperator target=AndOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolOpCallExp.source=current}
		public Action getBoolOpCallExpSourceAction_1_0() { return cBoolOpCallExpSourceAction_1_0; }
		
		//name=OrOperator
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//OrOperator
		public RuleCall getNameOrOperatorParserRuleCall_1_1_0() { return cNameOrOperatorParserRuleCall_1_1_0; }
		
		//target=AndOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//AndOpExp
		public RuleCall getTargetAndOpExpParserRuleCall_1_2_0() { return cTargetAndOpExpParserRuleCall_1_2_0; }
	}
	public class AndOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.AndOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBoolOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameAndOperatorParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetEqOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//AndOpExp OclExpression:
		//	EqOpExp ({BoolOpCallExp.source=current} name=AndOperator target=EqOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//EqOpExp ({BoolOpCallExp.source=current} name=AndOperator target=EqOpExp)*
		public Group getGroup() { return cGroup; }
		
		//EqOpExp
		public RuleCall getEqOpExpParserRuleCall_0() { return cEqOpExpParserRuleCall_0; }
		
		//({BoolOpCallExp.source=current} name=AndOperator target=EqOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolOpCallExp.source=current}
		public Action getBoolOpCallExpSourceAction_1_0() { return cBoolOpCallExpSourceAction_1_0; }
		
		//name=AndOperator
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//AndOperator
		public RuleCall getNameAndOperatorParserRuleCall_1_1_0() { return cNameAndOperatorParserRuleCall_1_1_0; }
		
		//target=EqOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//EqOpExp
		public RuleCall getTargetEqOpExpParserRuleCall_1_2_0() { return cTargetEqOpExpParserRuleCall_1_2_0; }
	}
	public class EqOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.EqOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameLessThanSignGreaterThanSignKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetComparisonOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//EqOpExp OclExpression:
		//	ComparisonOpExp ({EqOpCallExp.source=current} name=('<>' | '=') target=ComparisonOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonOpExp ({EqOpCallExp.source=current} name=('<>' | '=') target=ComparisonOpExp)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonOpExp
		public RuleCall getComparisonOpExpParserRuleCall_0() { return cComparisonOpExpParserRuleCall_0; }
		
		//({EqOpCallExp.source=current} name=('<>' | '=') target=ComparisonOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqOpCallExp.source=current}
		public Action getEqOpCallExpSourceAction_1_0() { return cEqOpCallExpSourceAction_1_0; }
		
		//name=('<>' | '=')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('<>' | '=')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//'<>'
		public Keyword getNameLessThanSignGreaterThanSignKeyword_1_1_0_0() { return cNameLessThanSignGreaterThanSignKeyword_1_1_0_0; }
		
		//'='
		public Keyword getNameEqualsSignKeyword_1_1_0_1() { return cNameEqualsSignKeyword_1_1_0_1; }
		
		//target=ComparisonOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//ComparisonOpExp
		public RuleCall getTargetComparisonOpExpParserRuleCall_1_2_0() { return cTargetComparisonOpExpParserRuleCall_1_2_0; }
	}
	public class ComparisonOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.ComparisonOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameGreaterThanSignKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameLessThanSignKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNameGreaterThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cNameAlternatives_1_1_0.eContents().get(2);
		private final Keyword cNameLessThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cNameAlternatives_1_1_0.eContents().get(3);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetAdditionOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//ComparisonOpExp OclExpression:
		//	AdditionOpExp ({ComOpCallExp.source=current} name=('>' | '<' | '>=' | '<=') target=AdditionOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionOpExp ({ComOpCallExp.source=current} name=('>' | '<' | '>=' | '<=') target=AdditionOpExp)*
		public Group getGroup() { return cGroup; }
		
		//AdditionOpExp
		public RuleCall getAdditionOpExpParserRuleCall_0() { return cAdditionOpExpParserRuleCall_0; }
		
		//({ComOpCallExp.source=current} name=('>' | '<' | '>=' | '<=') target=AdditionOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComOpCallExp.source=current}
		public Action getComOpCallExpSourceAction_1_0() { return cComOpCallExpSourceAction_1_0; }
		
		//name=('>' | '<' | '>=' | '<=')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('>' | '<' | '>=' | '<=')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//'>'
		public Keyword getNameGreaterThanSignKeyword_1_1_0_0() { return cNameGreaterThanSignKeyword_1_1_0_0; }
		
		//'<'
		public Keyword getNameLessThanSignKeyword_1_1_0_1() { return cNameLessThanSignKeyword_1_1_0_1; }
		
		//'>='
		public Keyword getNameGreaterThanSignEqualsSignKeyword_1_1_0_2() { return cNameGreaterThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'<='
		public Keyword getNameLessThanSignEqualsSignKeyword_1_1_0_3() { return cNameLessThanSignEqualsSignKeyword_1_1_0_3; }
		
		//target=AdditionOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//AdditionOpExp
		public RuleCall getTargetAdditionOpExpParserRuleCall_1_2_0() { return cTargetAdditionOpExpParserRuleCall_1_2_0; }
	}
	public class AdditionOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.AdditionOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNamePlusSignKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetMultiOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//AdditionOpExp OclExpression:
		//	MultiOpExp ({AddOpCallExp.source=current} name=('+' | '-') target=MultiOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//MultiOpExp ({AddOpCallExp.source=current} name=('+' | '-') target=MultiOpExp)*
		public Group getGroup() { return cGroup; }
		
		//MultiOpExp
		public RuleCall getMultiOpExpParserRuleCall_0() { return cMultiOpExpParserRuleCall_0; }
		
		//({AddOpCallExp.source=current} name=('+' | '-') target=MultiOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AddOpCallExp.source=current}
		public Action getAddOpCallExpSourceAction_1_0() { return cAddOpCallExpSourceAction_1_0; }
		
		//name=('+' | '-')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//'+'
		public Keyword getNamePlusSignKeyword_1_1_0_0() { return cNamePlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getNameHyphenMinusKeyword_1_1_0_1() { return cNameHyphenMinusKeyword_1_1_0_1; }
		
		//target=MultiOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//MultiOpExp
		public RuleCall getTargetMultiOpExpParserRuleCall_1_2_0() { return cTargetMultiOpExpParserRuleCall_1_2_0; }
	}
	public class MultiOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.MultiOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNavOpExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOpCallExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameSolidusKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetNavOpExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//MultiOpExp OclExpression:
		//	NavOpExp ({MulOpCallExp.source=current} name=('*' | '/') target=NavOpExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//NavOpExp ({MulOpCallExp.source=current} name=('*' | '/') target=NavOpExp)*
		public Group getGroup() { return cGroup; }
		
		//NavOpExp
		public RuleCall getNavOpExpParserRuleCall_0() { return cNavOpExpParserRuleCall_0; }
		
		//({MulOpCallExp.source=current} name=('*' | '/') target=NavOpExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOpCallExp.source=current}
		public Action getMulOpCallExpSourceAction_1_0() { return cMulOpCallExpSourceAction_1_0; }
		
		//name=('*' | '/')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_1_0_0() { return cNameAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getNameSolidusKeyword_1_1_0_1() { return cNameSolidusKeyword_1_1_0_1; }
		
		//target=NavOpExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//NavOpExp
		public RuleCall getTargetNavOpExpParserRuleCall_1_2_0() { return cTargetNavOpExpParserRuleCall_1_2_0; }
	}
	public class NavOpExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NavOpExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNavigationOpCallExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNavigationExpSourceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNavigationOperatorParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTargetNavigationOpCallExpParserRuleCall_1_2_0 = (RuleCall)cTargetAssignment_1_2.eContents().get(0);
		
		//NavOpExp OclExpression:
		//	NavigationOpCallExp ({NavigationExp.source=current} name=NavigationOperator target=NavigationOpCallExp)*
		@Override public ParserRule getRule() { return rule; }
		
		//NavigationOpCallExp ({NavigationExp.source=current} name=NavigationOperator target=NavigationOpCallExp)*
		public Group getGroup() { return cGroup; }
		
		//NavigationOpCallExp
		public RuleCall getNavigationOpCallExpParserRuleCall_0() { return cNavigationOpCallExpParserRuleCall_0; }
		
		//({NavigationExp.source=current} name=NavigationOperator target=NavigationOpCallExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{NavigationExp.source=current}
		public Action getNavigationExpSourceAction_1_0() { return cNavigationExpSourceAction_1_0; }
		
		//name=NavigationOperator
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//NavigationOperator
		public RuleCall getNameNavigationOperatorParserRuleCall_1_1_0() { return cNameNavigationOperatorParserRuleCall_1_1_0; }
		
		//target=NavigationOpCallExp
		public Assignment getTargetAssignment_1_2() { return cTargetAssignment_1_2; }
		
		//NavigationOpCallExp
		public RuleCall getTargetNavigationOpCallExpParserRuleCall_1_2_0() { return cTargetNavigationOpCallExpParserRuleCall_1_2_0; }
	}
	public class NavigationOpCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NavigationOpCallExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationOrAttributeCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIterateExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIteratorExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCollectionOpCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrimaryExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//NavigationOpCallExp OclExpression:
		//	OperationCall
		//	| NavigationOrAttributeCall
		//	| IterateExp
		//	| IteratorExp
		//	| CollectionOpCall
		//	| PrimaryExp
		@Override public ParserRule getRule() { return rule; }
		
		//OperationCall | NavigationOrAttributeCall | IterateExp | IteratorExp | CollectionOpCall | PrimaryExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationCall
		public RuleCall getOperationCallParserRuleCall_0() { return cOperationCallParserRuleCall_0; }
		
		//NavigationOrAttributeCall
		public RuleCall getNavigationOrAttributeCallParserRuleCall_1() { return cNavigationOrAttributeCallParserRuleCall_1; }
		
		//IterateExp
		public RuleCall getIterateExpParserRuleCall_2() { return cIterateExpParserRuleCall_2; }
		
		//IteratorExp
		public RuleCall getIteratorExpParserRuleCall_3() { return cIteratorExpParserRuleCall_3; }
		
		//CollectionOpCall
		public RuleCall getCollectionOpCallParserRuleCall_4() { return cCollectionOpCallParserRuleCall_4; }
		
		//PrimaryExp
		public RuleCall getPrimaryExpParserRuleCall_5() { return cPrimaryExpParserRuleCall_5; }
	}
	public class CollectionOpCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.CollectionOpCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectionOpCallExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCollectionOperationIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CollectionOpCall OclExpression:
		//	{CollectionOpCallExp} name=CollectionOperationID '(' (arguments+=OclExpression ("," arguments+=OclExpression)*)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{CollectionOpCallExp} name=CollectionOperationID '(' (arguments+=OclExpression ("," arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{CollectionOpCallExp}
		public Action getCollectionOpCallExpAction_0() { return cCollectionOpCallExpAction_0; }
		
		//name=CollectionOperationID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CollectionOperationID
		public RuleCall getNameCollectionOperationIDParserRuleCall_1_0() { return cNameCollectionOperationIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=OclExpression ("," arguments+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_0_0() { return cArgumentsOclExpressionParserRuleCall_3_0_0; }
		
		//("," arguments+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IterateExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.IterateExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIterateExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameIterateKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIteratorsIteratorParserRuleCall_3_0 = (RuleCall)cIteratorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIteratorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_4_1_0 = (RuleCall)cIteratorsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResultAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cResultLocalVariableParserRuleCall_6_0 = (RuleCall)cResultAssignment_6.eContents().get(0);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyOclExpressionParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//IterateExp OclExpression:
		//	{IterateExp} name='iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|'
		//	body=OclExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{IterateExp} name='iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|'
		//body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{IterateExp}
		public Action getIterateExpAction_0() { return cIterateExpAction_0; }
		
		//name='iterate'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'iterate'
		public Keyword getNameIterateKeyword_1_0() { return cNameIterateKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_3() { return cIteratorsAssignment_3; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_3_0() { return cIteratorsIteratorParserRuleCall_3_0; }
		
		//(',' iterators+=Iterator)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_4_1() { return cIteratorsAssignment_4_1; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_4_1_0() { return cIteratorsIteratorParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//result=LocalVariable
		public Assignment getResultAssignment_6() { return cResultAssignment_6; }
		
		//LocalVariable
		public RuleCall getResultLocalVariableParserRuleCall_6_0() { return cResultLocalVariableParserRuleCall_6_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_8_0() { return cBodyOclExpressionParserRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class IteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.Iterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Iterator:
		//	name=ID (':' type=OclType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (':' type=OclType)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' type=OclType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_1_1_0() { return cTypeOclTypeParserRuleCall_1_1_0; }
	}
	public class IteratorExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.IteratorExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIteratorExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIterativeOperationIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIteratorsIteratorParserRuleCall_3_0 = (RuleCall)cIteratorsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIteratorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_4_1_0 = (RuleCall)cIteratorsAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyOclExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IteratorExp OclExpression:
		//	{IteratorExp} name=IterativeOperationID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{IteratorExp} name=IterativeOperationID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{IteratorExp}
		public Action getIteratorExpAction_0() { return cIteratorExpAction_0; }
		
		//name=IterativeOperationID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IterativeOperationID
		public RuleCall getNameIterativeOperationIDParserRuleCall_1_0() { return cNameIterativeOperationIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_3() { return cIteratorsAssignment_3; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_3_0() { return cIteratorsIteratorParserRuleCall_3_0; }
		
		//(',' iterators+=Iterator)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//iterators+=Iterator
		public Assignment getIteratorsAssignment_4_1() { return cIteratorsAssignment_4_1; }
		
		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_4_1_0() { return cIteratorsIteratorParserRuleCall_4_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }
		
		//body=OclExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_6_0() { return cBodyOclExpressionParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class NavigationOrAttributeCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NavigationOrAttributeCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNavigationOrAttributeCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureIDTerminalRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		//NavigationOrAttributeCall OclExpression:
		//	{NavigationOrAttributeCall} feature=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{NavigationOrAttributeCall} feature=ID
		public Group getGroup() { return cGroup; }
		
		//{NavigationOrAttributeCall}
		public Action getNavigationOrAttributeCallAction_0() { return cNavigationOrAttributeCallAction_0; }
		
		//feature=ID
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//ID
		public RuleCall getFeatureIDTerminalRuleCall_1_0() { return cFeatureIDTerminalRuleCall_1_0; }
	}
	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperationCall OclExpression:
		//	{OperationCall} name=ID '(' (arguments+=OclExpression ("," arguments+=OclExpression)*)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{OperationCall} name=ID '(' (arguments+=OclExpression ("," arguments+=OclExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{OperationCall}
		public Action getOperationCallAction_0() { return cOperationCallAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(arguments+=OclExpression ("," arguments+=OclExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_0_0() { return cArgumentsOclExpressionParserRuleCall_3_0_0; }
		
		//("," arguments+=OclExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }
		
		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OclModelElementExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OclModelElementExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelOclModelParserRuleCall_0_0 = (RuleCall)cModelAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameColonColonKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsIDTerminalRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsIDTerminalRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTargetAllInstancesOpCallParserRuleCall_4_0 = (RuleCall)cTargetAssignment_4.eContents().get(0);
		
		//OclModelElementExp OclExpression:
		//	model=OclModel name='::' elements+=ID ('::' elements+=ID)* target=AllInstancesOpCall?
		@Override public ParserRule getRule() { return rule; }
		
		//model=OclModel name='::' elements+=ID ('::' elements+=ID)* target=AllInstancesOpCall?
		public Group getGroup() { return cGroup; }
		
		//model=OclModel
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//OclModel
		public RuleCall getModelOclModelParserRuleCall_0_0() { return cModelOclModelParserRuleCall_0_0; }
		
		//name='::'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'::'
		public Keyword getNameColonColonKeyword_1_0() { return cNameColonColonKeyword_1_0; }
		
		//elements+=ID
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//ID
		public RuleCall getElementsIDTerminalRuleCall_2_0() { return cElementsIDTerminalRuleCall_2_0; }
		
		//('::' elements+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }
		
		//elements+=ID
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//ID
		public RuleCall getElementsIDTerminalRuleCall_3_1_0() { return cElementsIDTerminalRuleCall_3_1_0; }
		
		//target=AllInstancesOpCall?
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//AllInstancesOpCall
		public RuleCall getTargetAllInstancesOpCallParserRuleCall_4_0() { return cTargetAllInstancesOpCallParserRuleCall_4_0; }
	}
	public class AllInstancesOpCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.AllInstancesOpCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameAllInstancesKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AllInstancesOpCall OclExpression:
		//	{OperationCall} '.' name='allInstances' '(' ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{OperationCall} '.' name='allInstances' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//{OperationCall}
		public Action getOperationCallAction_0() { return cOperationCallAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//name='allInstances'
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//'allInstances'
		public Keyword getNameAllInstancesKeyword_2_0() { return cNameAllInstancesKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitExpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitExpOclExpressionParserRuleCall_4_0 = (RuleCall)cInitExpAssignment_4.eContents().get(0);
		
		//LocalVariable:
		//	name=ID ':' type=OclType '=' initExp=OclExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=OclType '=' initExp=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=OclType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_0() { return cTypeOclTypeParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//initExp=OclExpression
		public Assignment getInitExpAssignment_4() { return cInitExpAssignment_4; }
		
		//OclExpression
		public RuleCall getInitExpOclExpressionParserRuleCall_4_0() { return cInitExpOclExpressionParserRuleCall_4_0; }
	}
	public class PrimaryExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.PrimaryExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSeflExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimitiveExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTupleExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLambdaExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOclModelElementExpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PrimaryExp OclExpression:
		//	SeflExp
		//	| NestedExp
		//	| IfExp
		//	| PrimitiveExp
		//	| TupleExp
		//	| LambdaExp
		//	| OclModelElementExp
		@Override public ParserRule getRule() { return rule; }
		
		//SeflExp | NestedExp | IfExp | PrimitiveExp | TupleExp | LambdaExp | OclModelElementExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SeflExp
		public RuleCall getSeflExpParserRuleCall_0() { return cSeflExpParserRuleCall_0; }
		
		//NestedExp
		public RuleCall getNestedExpParserRuleCall_1() { return cNestedExpParserRuleCall_1; }
		
		//IfExp
		public RuleCall getIfExpParserRuleCall_2() { return cIfExpParserRuleCall_2; }
		
		//PrimitiveExp
		public RuleCall getPrimitiveExpParserRuleCall_3() { return cPrimitiveExpParserRuleCall_3; }
		
		//TupleExp
		public RuleCall getTupleExpParserRuleCall_4() { return cTupleExpParserRuleCall_4; }
		
		//LambdaExp
		public RuleCall getLambdaExpParserRuleCall_5() { return cLambdaExpParserRuleCall_5; }
		
		//OclModelElementExp
		public RuleCall getOclModelElementExpParserRuleCall_6() { return cOclModelElementExpParserRuleCall_6; }
	}
	public class LambdaExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.LambdaExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLambdaExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameLambdaKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LambdaExp OclExpression:
		//	{LambdaExp} name='Lambda' '{' expression=OclExpression '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{LambdaExp} name='Lambda' '{' expression=OclExpression '}'
		public Group getGroup() { return cGroup; }
		
		//{LambdaExp}
		public Action getLambdaExpAction_0() { return cLambdaExpAction_0; }
		
		//name='Lambda'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'Lambda'
		public Keyword getNameLambdaKeyword_1_0() { return cNameLambdaKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//expression=OclExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//OclExpression
		public RuleCall getExpressionOclExpressionParserRuleCall_3_0() { return cExpressionOclExpressionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TupleExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.TupleExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameTupleKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartsTuplePartParserRuleCall_3_0 = (RuleCall)cPartsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPartsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPartsTuplePartParserRuleCall_4_1_0 = (RuleCall)cPartsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////CollectionExp returns CollectionExp:
		////	  BagExp |SequenceExp | SetExp | OrderedSetExp 
		////;
		////
		////CollectionPart returns CollectionPart:
		////	CollectionRange | CollectionItem
		////;
		////
		////CollectionItem returns CollectionItem:
		////	item=OclExpression
		////;
		////
		////CollectionRange returns CollectionRange:
		////	first=OclExpression '..' last=OclExpression
		////;
		////
		////BagExp returns BagExp:
		////	{BagExp} 'Bag'  '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
		////;
		////
		////SequenceExp returns SequenceExp : 
		////	{SequenceExp} 'Sequence' '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
		////;
		////
		////SetExp returns SetExp : 
		////	{SetExp} 'Set' '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
		////;
		////
		////OrderedSetExp returns OrderedSetExp : 
		////	{OrderedSetExp} 'OrderedSetExp' '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
		////;
		////MapExp returns OclExpression :
		////	{MapExp} name='Map' '{' elements+=MapElement (',' elements+=MapElement)* '}'
		////;
		////
		////MapElement returns MapElement:
		////	'(' key=OclExpression ',' value=OclExpression ')'
		////;
		////BooleanOpExp returns OclExpression:
		////	PrimaryOclExpression ({BoolOpCallExp.source=current} name=('and' | 'or' | 'xor' | 'implies') target=PrimaryOclExpression)*
		////;
		////
		////PrimaryOclExpression returns OclExpression:
		////	 PrimaryExp 
		////;
		//TupleExp OclExpression:
		//	{TupleExp} name='Tuple' '{' parts+=TuplePart (',' parts+=TuplePart)* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{TupleExp} name='Tuple' '{' parts+=TuplePart (',' parts+=TuplePart)* '}'
		public Group getGroup() { return cGroup; }
		
		//{TupleExp}
		public Action getTupleExpAction_0() { return cTupleExpAction_0; }
		
		//name='Tuple'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'Tuple'
		public Keyword getNameTupleKeyword_1_0() { return cNameTupleKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//parts+=TuplePart
		public Assignment getPartsAssignment_3() { return cPartsAssignment_3; }
		
		//TuplePart
		public RuleCall getPartsTuplePartParserRuleCall_3_0() { return cPartsTuplePartParserRuleCall_3_0; }
		
		//(',' parts+=TuplePart)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parts+=TuplePart
		public Assignment getPartsAssignment_4_1() { return cPartsAssignment_4_1; }
		
		//TuplePart
		public RuleCall getPartsTuplePartParserRuleCall_4_1_0() { return cPartsTuplePartParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TuplePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.TuplePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitOclExpressionParserRuleCall_3_0 = (RuleCall)cInitAssignment_3.eContents().get(0);
		
		//TuplePart:
		//	name=STRING (':' type=OclType)? '=' init=OclExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING (':' type=OclType)? '=' init=OclExpression
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//(':' type=OclType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=OclType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_1_1_0() { return cTypeOclTypeParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//init=OclExpression
		public Assignment getInitAssignment_3() { return cInitAssignment_3; }
		
		//OclExpression
		public RuleCall getInitOclExpressionParserRuleCall_3_0() { return cInitOclExpressionParserRuleCall_3_0; }
	}
	public class PrimitiveExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.PrimitiveExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnlimitedNaturalExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInvalidExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimitiveExp:
		//	NumberExp
		//	| StringExp
		//	| BooleanExp
		//	| UnlimitedNaturalExp
		//	| InvalidExp
		//	| NullExp;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberExp | StringExp | BooleanExp | UnlimitedNaturalExp | InvalidExp | NullExp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberExp
		public RuleCall getNumberExpParserRuleCall_0() { return cNumberExpParserRuleCall_0; }
		
		//StringExp
		public RuleCall getStringExpParserRuleCall_1() { return cStringExpParserRuleCall_1; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall_2() { return cBooleanExpParserRuleCall_2; }
		
		//UnlimitedNaturalExp
		public RuleCall getUnlimitedNaturalExpParserRuleCall_3() { return cUnlimitedNaturalExpParserRuleCall_3; }
		
		//InvalidExp
		public RuleCall getInvalidExpParserRuleCall_4() { return cInvalidExpParserRuleCall_4; }
		
		//NullExp
		public RuleCall getNullExpParserRuleCall_5() { return cNullExpParserRuleCall_5; }
	}
	public class NumberExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NumberExp");
		private final Assignment cSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSymbolINTTerminalRuleCall_0 = (RuleCall)cSymbolAssignment.eContents().get(0);
		
		//NumberExp NumberLiteralExp:
		//	symbol=INT
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=INT
		public Assignment getSymbolAssignment() { return cSymbolAssignment; }
		
		//INT
		public RuleCall getSymbolINTTerminalRuleCall_0() { return cSymbolINTTerminalRuleCall_0; }
	}
	public class StringExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.StringExp");
		private final Assignment cSegmentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSegmentsSTRINGTerminalRuleCall_0 = (RuleCall)cSegmentsAssignment.eContents().get(0);
		
		//StringExp StringLiteralExp:
		//	segments+=STRING+
		@Override public ParserRule getRule() { return rule; }
		
		//segments+=STRING+
		public Assignment getSegmentsAssignment() { return cSegmentsAssignment; }
		
		//STRING
		public RuleCall getSegmentsSTRINGTerminalRuleCall_0() { return cSegmentsSTRINGTerminalRuleCall_0; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSymbolTrueKeyword_0_0 = (Keyword)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSymbolFalseKeyword_1_0 = (Keyword)cSymbolAssignment_1.eContents().get(0);
		
		//BooleanExp BooleanLiteralExp:
		//	symbol='true'
		//	| symbol='false'
		@Override public ParserRule getRule() { return rule; }
		
		//symbol='true' | symbol='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//symbol='true'
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//'true'
		public Keyword getSymbolTrueKeyword_0_0() { return cSymbolTrueKeyword_0_0; }
		
		//symbol='false'
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//'false'
		public Keyword getSymbolFalseKeyword_1_0() { return cSymbolFalseKeyword_1_0; }
	}
	public class UnlimitedNaturalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.UnlimitedNaturalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnlimitedNaturalLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnlimitedNaturalExp UnlimitedNaturalLiteralExp:
		//	{UnlimitedNaturalLiteralExp} '*'
		@Override public ParserRule getRule() { return rule; }
		
		//{UnlimitedNaturalLiteralExp} '*'
		public Group getGroup() { return cGroup; }
		
		//{UnlimitedNaturalLiteralExp}
		public Action getUnlimitedNaturalLiteralExpAction_0() { return cUnlimitedNaturalLiteralExpAction_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class InvalidExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.InvalidExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvalidLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvalidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InvalidExp InvalidLiteralExp:
		//	{InvalidLiteralExp} 'invalid'
		@Override public ParserRule getRule() { return rule; }
		
		//{InvalidLiteralExp} 'invalid'
		public Group getGroup() { return cGroup; }
		
		//{InvalidLiteralExp}
		public Action getInvalidLiteralExpAction_0() { return cInvalidLiteralExpAction_0; }
		
		//'invalid'
		public Keyword getInvalidKeyword_1() { return cInvalidKeyword_1; }
	}
	public class NullExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NullExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullExp NullLiteralExp:
		//	{NullLiteralExp} 'null'
		@Override public ParserRule getRule() { return rule; }
		
		//{NullLiteralExp} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullLiteralExp}
		public Action getNullLiteralExpAction_0() { return cNullLiteralExpAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class IfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.IfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIfKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOclExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenOclExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Assignment cIfThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfThenElseIfThenExpParserRuleCall_4_0 = (RuleCall)cIfThenAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElseAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElseOclExpressionParserRuleCall_6_0 = (RuleCall)cElseAssignment_6.eContents().get(0);
		private final Keyword cEndifKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfExp:
		//	name='if' condition=OclExpression
		//	'then' then=OclExpression
		//	ifThen+=ElseIfThenExp*
		//	'else' else=OclExpression
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//name='if' condition=OclExpression 'then' then=OclExpression ifThen+=ElseIfThenExp* 'else' else=OclExpression 'endif'
		public Group getGroup() { return cGroup; }
		
		//name='if'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'if'
		public Keyword getNameIfKeyword_0_0() { return cNameIfKeyword_0_0; }
		
		//condition=OclExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//OclExpression
		public RuleCall getConditionOclExpressionParserRuleCall_1_0() { return cConditionOclExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//then=OclExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//OclExpression
		public RuleCall getThenOclExpressionParserRuleCall_3_0() { return cThenOclExpressionParserRuleCall_3_0; }
		
		//ifThen+=ElseIfThenExp*
		public Assignment getIfThenAssignment_4() { return cIfThenAssignment_4; }
		
		//ElseIfThenExp
		public RuleCall getIfThenElseIfThenExpParserRuleCall_4_0() { return cIfThenElseIfThenExpParserRuleCall_4_0; }
		
		//'else'
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }
		
		//else=OclExpression
		public Assignment getElseAssignment_6() { return cElseAssignment_6; }
		
		//OclExpression
		public RuleCall getElseOclExpressionParserRuleCall_6_0() { return cElseOclExpressionParserRuleCall_6_0; }
		
		//'endif'
		public Keyword getEndifKeyword_7() { return cEndifKeyword_7; }
	}
	public class ElseIfThenExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.ElseIfThenExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseIfThenExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameElseifKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionOclExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenOclExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		
		//ElseIfThenExp OclExpression:
		//	{ElseIfThenExp} name='elseif' condition=OclExpression
		//	'then' then=OclExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseIfThenExp} name='elseif' condition=OclExpression 'then' then=OclExpression
		public Group getGroup() { return cGroup; }
		
		//{ElseIfThenExp}
		public Action getElseIfThenExpAction_0() { return cElseIfThenExpAction_0; }
		
		//name='elseif'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'elseif'
		public Keyword getNameElseifKeyword_1_0() { return cNameElseifKeyword_1_0; }
		
		//condition=OclExpression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//OclExpression
		public RuleCall getConditionOclExpressionParserRuleCall_2_0() { return cConditionOclExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//then=OclExpression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//OclExpression
		public RuleCall getThenOclExpressionParserRuleCall_4_0() { return cThenOclExpressionParserRuleCall_4_0; }
	}
	public class SeflExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.SeflExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelfExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameSelfKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//SeflExp OclExpression:
		//	{SelfExp} name='self'
		@Override public ParserRule getRule() { return rule; }
		
		//{SelfExp} name='self'
		public Group getGroup() { return cGroup; }
		
		//{SelfExp}
		public Action getSelfExpAction_0() { return cSelfExpAction_0; }
		
		//name='self'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'self'
		public Keyword getNameSelfKeyword_1_0() { return cNameSelfKeyword_1_0; }
	}
	public class NestedExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.NestedExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNestedExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpOclExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NestedExp OclExpression:
		//	{NestedExp} '(' exp=OclExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{NestedExp} '(' exp=OclExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{NestedExp}
		public Action getNestedExpAction_0() { return cNestedExpAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=OclExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//OclExpression
		public RuleCall getExpOclExpressionParserRuleCall_2_0() { return cExpOclExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OclTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OclType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBagTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOrderedSetTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSequenceTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSetTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOclAnyTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTupleTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cOclModelElementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMapTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLambdaTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cEnvTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//OclType:
		//	StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType |
		//	TupleType | OclModelElement | MapType | LambdaType | EnvType;
		@Override public ParserRule getRule() { return rule; }
		
		//StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType |
		//TupleType | OclModelElement | MapType | LambdaType | EnvType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_0() { return cStringTypeParserRuleCall_0; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_2() { return cIntegerTypeParserRuleCall_2; }
		
		//RealType
		public RuleCall getRealTypeParserRuleCall_3() { return cRealTypeParserRuleCall_3; }
		
		//BagType
		public RuleCall getBagTypeParserRuleCall_4() { return cBagTypeParserRuleCall_4; }
		
		//OrderedSetType
		public RuleCall getOrderedSetTypeParserRuleCall_5() { return cOrderedSetTypeParserRuleCall_5; }
		
		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_6() { return cSequenceTypeParserRuleCall_6; }
		
		//SetType
		public RuleCall getSetTypeParserRuleCall_7() { return cSetTypeParserRuleCall_7; }
		
		//OclAnyType
		public RuleCall getOclAnyTypeParserRuleCall_8() { return cOclAnyTypeParserRuleCall_8; }
		
		//TupleType
		public RuleCall getTupleTypeParserRuleCall_9() { return cTupleTypeParserRuleCall_9; }
		
		//OclModelElement
		public RuleCall getOclModelElementParserRuleCall_10() { return cOclModelElementParserRuleCall_10; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_11() { return cMapTypeParserRuleCall_11; }
		
		//LambdaType
		public RuleCall getLambdaTypeParserRuleCall_12() { return cLambdaTypeParserRuleCall_12; }
		
		//EnvType
		public RuleCall getEnvTypeParserRuleCall_13() { return cEnvTypeParserRuleCall_13; }
	}
	public class OclModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OclModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelOclModelParserRuleCall_0_0 = (RuleCall)cModelAssignment_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OclModelElement OclModelElementExp:
		//	model=OclModel '::' name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//model=OclModel '::' name=ID
		public Group getGroup() { return cGroup; }
		
		//model=OclModel
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//OclModel
		public RuleCall getModelOclModelParserRuleCall_0_0() { return cModelOclModelParserRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class EnvTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.EnvType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameEnvKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EnvType:
		//	name='Env' // using the Env variable for indices/
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name='Env'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'Env'
		public Keyword getNameEnvKeyword_0() { return cNameEnvKeyword_0; }
	}
	public class LambdaTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.LambdaType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLambdaKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsTypesOclTypeParserRuleCall_2_0 = (RuleCall)cArgsTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgsTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgsTypesOclTypeParserRuleCall_3_1_0 = (RuleCall)cArgsTypesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeOclTypeParserRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		
		//LambdaType:
		//	name='Lambda' '(' argsTypes+=OclType (',' argsTypes+=OclType)* ')' ':' returnType=OclType;
		@Override public ParserRule getRule() { return rule; }
		
		//name='Lambda' '(' argsTypes+=OclType (',' argsTypes+=OclType)* ')' ':' returnType=OclType
		public Group getGroup() { return cGroup; }
		
		//name='Lambda'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Lambda'
		public Keyword getNameLambdaKeyword_0_0() { return cNameLambdaKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//argsTypes+=OclType
		public Assignment getArgsTypesAssignment_2() { return cArgsTypesAssignment_2; }
		
		//OclType
		public RuleCall getArgsTypesOclTypeParserRuleCall_2_0() { return cArgsTypesOclTypeParserRuleCall_2_0; }
		
		//(',' argsTypes+=OclType)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//argsTypes+=OclType
		public Assignment getArgsTypesAssignment_3_1() { return cArgsTypesAssignment_3_1; }
		
		//OclType
		public RuleCall getArgsTypesOclTypeParserRuleCall_3_1_0() { return cArgsTypesOclTypeParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//returnType=OclType
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//OclType
		public RuleCall getReturnTypeOclTypeParserRuleCall_6_0() { return cReturnTypeOclTypeParserRuleCall_6_0; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMapKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeOclTypeParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeOclTypeParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MapType:
		//	name='Map' '(' keyType=OclType ',' valueType=OclType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Map' '(' keyType=OclType ',' valueType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//name='Map'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Map'
		public Keyword getNameMapKeyword_0_0() { return cNameMapKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//keyType=OclType
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//OclType
		public RuleCall getKeyTypeOclTypeParserRuleCall_2_0() { return cKeyTypeOclTypeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//valueType=OclType
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }
		
		//OclType
		public RuleCall getValueTypeOclTypeParserRuleCall_4_0() { return cValueTypeOclTypeParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.TupleType");
		private final Keyword cTupleTypeKeyword = (Keyword)rule.eContents().get(1);
		
		//TupleType:
		//	'TupleType';
		@Override public ParserRule getRule() { return rule; }
		
		//'TupleType'
		public Keyword getTupleTypeKeyword() { return cTupleTypeKeyword; }
	}
	public class OclAnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OclAnyType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameOclAnyKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//OclAnyType:
		//	name='OclAny';
		@Override public ParserRule getRule() { return rule; }
		
		//name='OclAny'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'OclAny'
		public Keyword getNameOclAnyKeyword_0() { return cNameOclAnyKeyword_0; }
	}
	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSetKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetType:
		//	name='Set' '(' elementType=OclType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Set' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//name='Set'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Set'
		public Keyword getNameSetKeyword_0_0() { return cNameSetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSequenceKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SequenceType:
		//	name='Sequence' '(' elementType=OclType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Sequence' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//name='Sequence'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'Sequence'
		public Keyword getNameSequenceKeyword_0_0() { return cNameSequenceKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OrderedSetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.OrderedSetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOrderedSetKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OrderedSetType:
		//	name='OrderedSet' '(' elementType=OclType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='OrderedSet' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//name='OrderedSet'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'OrderedSet'
		public Keyword getNameOrderedSetKeyword_0_0() { return cNameOrderedSetKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BagTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.BagType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBagTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BagType:
		//	name='BagType' '(' elementType=OclType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name='BagType' '(' elementType=OclType ')'
		public Group getGroup() { return cGroup; }
		
		//name='BagType'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'BagType'
		public Keyword getNameBagTypeKeyword_0_0() { return cNameBagTypeKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }
		
		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.RealType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameRealKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//RealType:
		//	name='Real';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Real'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'Real'
		public Keyword getNameRealKeyword_0() { return cNameRealKeyword_0; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.IntegerType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameIntegerKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//IntegerType:
		//	name='Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Integer'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'Integer'
		public Keyword getNameIntegerKeyword_0() { return cNameIntegerKeyword_0; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.BooleanType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameBooleanKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanType:
		//	name='Boolean';
		@Override public ParserRule getRule() { return rule; }
		
		//name='Boolean'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'Boolean'
		public Keyword getNameBooleanKeyword_0() { return cNameBooleanKeyword_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.StringType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameStringKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//StringType:
		//	name='String';
		@Override public ParserRule getRule() { return rule; }
		
		//name='String'
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//'String'
		public Keyword getNameStringKeyword_0() { return cNameStringKeyword_0; }
	}
	
	
	private final ModuleElements pModule;
	private final OclModelElements pOclModel;
	private final URI_Elements pURI_;
	private final FRAGMENTElements pFRAGMENT;
	private final AUTHORITYElements pAUTHORITY;
	private final TerminalRule tSCHEME;
	private final ImportElements pImport;
	private final ModuleElementElements pModuleElement;
	private final QueryElements pQuery;
	private final UnaryOperatorElements pUnaryOperator;
	private final MultiOperatorElements pMultiOperator;
	private final AdditionOperatorElements pAdditionOperator;
	private final ComparisonOperatorElements pComparisonOperator;
	private final EqualityOperatorElements pEqualityOperator;
	private final AndOperatorElements pAndOperator;
	private final OrOperatorElements pOrOperator;
	private final XorOperatorElements pXorOperator;
	private final ImpliesOperatorElements pImpliesOperator;
	private final BooleanOperatorElements pBooleanOperator;
	private final NavigationOperatorElements pNavigationOperator;
	private final CollectionOperationIDElements pCollectionOperationID;
	private final IterativeOperationIDElements pIterativeOperationID;
	private final OclExpressionElements pOclExpression;
	private final LetExpElements pLetExp;
	private final UnaryOpExpElements pUnaryOpExp;
	private final ImpliesOpExpElements pImpliesOpExp;
	private final XorOpExpElements pXorOpExp;
	private final OrOpExpElements pOrOpExp;
	private final AndOpExpElements pAndOpExp;
	private final EqOpExpElements pEqOpExp;
	private final ComparisonOpExpElements pComparisonOpExp;
	private final AdditionOpExpElements pAdditionOpExp;
	private final MultiOpExpElements pMultiOpExp;
	private final NavOpExpElements pNavOpExp;
	private final NavigationOpCallExpElements pNavigationOpCallExp;
	private final CollectionOpCallElements pCollectionOpCall;
	private final IterateExpElements pIterateExp;
	private final IteratorElements pIterator;
	private final IteratorExpElements pIteratorExp;
	private final NavigationOrAttributeCallElements pNavigationOrAttributeCall;
	private final OperationCallElements pOperationCall;
	private final OclModelElementExpElements pOclModelElementExp;
	private final AllInstancesOpCallElements pAllInstancesOpCall;
	private final LocalVariableElements pLocalVariable;
	private final PrimaryExpElements pPrimaryExp;
	private final LambdaExpElements pLambdaExp;
	private final TupleExpElements pTupleExp;
	private final TuplePartElements pTuplePart;
	private final PrimitiveExpElements pPrimitiveExp;
	private final NumberExpElements pNumberExp;
	private final StringExpElements pStringExp;
	private final BooleanExpElements pBooleanExp;
	private final UnlimitedNaturalExpElements pUnlimitedNaturalExp;
	private final InvalidExpElements pInvalidExp;
	private final NullExpElements pNullExp;
	private final IfExpElements pIfExp;
	private final ElseIfThenExpElements pElseIfThenExp;
	private final SeflExpElements pSeflExp;
	private final NestedExpElements pNestedExp;
	private final OclTypeElements pOclType;
	private final OclModelElementElements pOclModelElement;
	private final EnvTypeElements pEnvType;
	private final LambdaTypeElements pLambdaType;
	private final MapTypeElements pMapType;
	private final TupleTypeElements pTupleType;
	private final OclAnyTypeElements pOclAnyType;
	private final SetTypeElements pSetType;
	private final SequenceTypeElements pSequenceType;
	private final OrderedSetTypeElements pOrderedSetType;
	private final BagTypeElements pBagType;
	private final RealTypeElements pRealType;
	private final IntegerTypeElements pIntegerType;
	private final BooleanTypeElements pBooleanType;
	private final StringTypeElements pStringType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DOclGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModule = new ModuleElements();
		this.pOclModel = new OclModelElements();
		this.pURI_ = new URI_Elements();
		this.pFRAGMENT = new FRAGMENTElements();
		this.pAUTHORITY = new AUTHORITYElements();
		this.tSCHEME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.diverse.docl.DOcl.SCHEME");
		this.pImport = new ImportElements();
		this.pModuleElement = new ModuleElementElements();
		this.pQuery = new QueryElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pMultiOperator = new MultiOperatorElements();
		this.pAdditionOperator = new AdditionOperatorElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pEqualityOperator = new EqualityOperatorElements();
		this.pAndOperator = new AndOperatorElements();
		this.pOrOperator = new OrOperatorElements();
		this.pXorOperator = new XorOperatorElements();
		this.pImpliesOperator = new ImpliesOperatorElements();
		this.pBooleanOperator = new BooleanOperatorElements();
		this.pNavigationOperator = new NavigationOperatorElements();
		this.pCollectionOperationID = new CollectionOperationIDElements();
		this.pIterativeOperationID = new IterativeOperationIDElements();
		this.pOclExpression = new OclExpressionElements();
		this.pLetExp = new LetExpElements();
		this.pUnaryOpExp = new UnaryOpExpElements();
		this.pImpliesOpExp = new ImpliesOpExpElements();
		this.pXorOpExp = new XorOpExpElements();
		this.pOrOpExp = new OrOpExpElements();
		this.pAndOpExp = new AndOpExpElements();
		this.pEqOpExp = new EqOpExpElements();
		this.pComparisonOpExp = new ComparisonOpExpElements();
		this.pAdditionOpExp = new AdditionOpExpElements();
		this.pMultiOpExp = new MultiOpExpElements();
		this.pNavOpExp = new NavOpExpElements();
		this.pNavigationOpCallExp = new NavigationOpCallExpElements();
		this.pCollectionOpCall = new CollectionOpCallElements();
		this.pIterateExp = new IterateExpElements();
		this.pIterator = new IteratorElements();
		this.pIteratorExp = new IteratorExpElements();
		this.pNavigationOrAttributeCall = new NavigationOrAttributeCallElements();
		this.pOperationCall = new OperationCallElements();
		this.pOclModelElementExp = new OclModelElementExpElements();
		this.pAllInstancesOpCall = new AllInstancesOpCallElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pPrimaryExp = new PrimaryExpElements();
		this.pLambdaExp = new LambdaExpElements();
		this.pTupleExp = new TupleExpElements();
		this.pTuplePart = new TuplePartElements();
		this.pPrimitiveExp = new PrimitiveExpElements();
		this.pNumberExp = new NumberExpElements();
		this.pStringExp = new StringExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pUnlimitedNaturalExp = new UnlimitedNaturalExpElements();
		this.pInvalidExp = new InvalidExpElements();
		this.pNullExp = new NullExpElements();
		this.pIfExp = new IfExpElements();
		this.pElseIfThenExp = new ElseIfThenExpElements();
		this.pSeflExp = new SeflExpElements();
		this.pNestedExp = new NestedExpElements();
		this.pOclType = new OclTypeElements();
		this.pOclModelElement = new OclModelElementElements();
		this.pEnvType = new EnvTypeElements();
		this.pLambdaType = new LambdaTypeElements();
		this.pMapType = new MapTypeElements();
		this.pTupleType = new TupleTypeElements();
		this.pOclAnyType = new OclAnyTypeElements();
		this.pSetType = new SetTypeElements();
		this.pSequenceType = new SequenceTypeElements();
		this.pOrderedSetType = new OrderedSetTypeElements();
		this.pBagType = new BagTypeElements();
		this.pRealType = new RealTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pStringType = new StringTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.diverse.docl.DOcl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * *********************************************
	// * 						Header
	// * *********************************************
	// * / Module:
	//	{Module}
	//	'module' name=ID
	//	'@@source' source=OclModel
	//	'@@input' input=OclModel (imports+=Import imports+=Import*)? (elements+=ModuleElement elements+=ModuleElement*)?;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//OclModel:
	//	name=ID
	//	uri=URI_?;
	public OclModelElements getOclModelAccess() {
		return pOclModel;
	}
	
	public ParserRule getOclModelRule() {
		return getOclModelAccess().getRule();
	}
	
	//URI_:
	//	'uri=' scheme=SCHEME '://' // Scheme
	//	authority=AUTHORITY '/' // 
	//	fragment_=FRAGMENT // 
	//;
	public URI_Elements getURI_Access() {
		return pURI_;
	}
	
	public ParserRule getURI_Rule() {
		return getURI_Access().getRule();
	}
	
	//FRAGMENT:
	//	ID ('/' ID)*;
	public FRAGMENTElements getFRAGMENTAccess() {
		return pFRAGMENT;
	}
	
	public ParserRule getFRAGMENTRule() {
		return getFRAGMENTAccess().getRule();
	}
	
	//AUTHORITY:
	//	ID ('.' ID)* (':' INT)? //TODO limit the number of characters 
	//;
	public AUTHORITYElements getAUTHORITYAccess() {
		return pAUTHORITY;
	}
	
	public ParserRule getAUTHORITYRule() {
		return getAUTHORITYAccess().getRule();
	}
	
	//terminal SCHEME:
	//	'http' | 'file' | 'platform' | 'neoemfhbase';
	public TerminalRule getSCHEMERule() {
		return tSCHEME;
	}
	
	//Import:
	//	{Import}
	//	'imports'
	//	name=ID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ModuleElement:
	//	Query // TODO extend this with additional moduleElements
	//;
	public ModuleElementElements getModuleElementAccess() {
		return pModuleElement;
	}
	
	public ParserRule getModuleElementRule() {
		return getModuleElementAccess().getRule();
	}
	
	//Query:
	//	{Query}
	//	'query' name=ID ':' body=OclExpression ';';
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	/// **
	// * ********************************************
	// * 					Operators
	// * *******************************************
	// * / UnaryOperator:
	//	'-' | 'not' // 
	//;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//MultiOperator:
	//	'*' | '/' // multiplication
	//;
	public MultiOperatorElements getMultiOperatorAccess() {
		return pMultiOperator;
	}
	
	public ParserRule getMultiOperatorRule() {
		return getMultiOperatorAccess().getRule();
	}
	
	//AdditionOperator:
	//	'+' | '-' // Addition
	//;
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return pAdditionOperator;
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}
	
	//ComparisonOperator:
	//	'>' | '<' | '>=' | '<=' //comparison
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//EqualityOperator:
	//	'=' | '<>' // Equality
	//;
	public EqualityOperatorElements getEqualityOperatorAccess() {
		return pEqualityOperator;
	}
	
	public ParserRule getEqualityOperatorRule() {
		return getEqualityOperatorAccess().getRule();
	}
	
	//AndOperator:
	//	'and';
	public AndOperatorElements getAndOperatorAccess() {
		return pAndOperator;
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}
	
	//OrOperator:
	//	'or';
	public OrOperatorElements getOrOperatorAccess() {
		return pOrOperator;
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}
	
	//XorOperator:
	//	'xor';
	public XorOperatorElements getXorOperatorAccess() {
		return pXorOperator;
	}
	
	public ParserRule getXorOperatorRule() {
		return getXorOperatorAccess().getRule();
	}
	
	//ImpliesOperator:
	//	'implies';
	public ImpliesOperatorElements getImpliesOperatorAccess() {
		return pImpliesOperator;
	}
	
	public ParserRule getImpliesOperatorRule() {
		return getImpliesOperatorAccess().getRule();
	}
	
	//BooleanOperator:
	//	XorOperator | OrOperator | AndOperator | ImpliesOperator // Boolean
	//;
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return pBooleanOperator;
	}
	
	public ParserRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//NavigationOperator:
	//	'.' | '->';
	public NavigationOperatorElements getNavigationOperatorAccess() {
		return pNavigationOperator;
	}
	
	public ParserRule getNavigationOperatorRule() {
		return getNavigationOperatorAccess().getRule();
	}
	
	//CollectionOperationID:
	//	'size'
	//	| 'includes'
	//	| 'excludes'
	//	| 'count'
	//	| 'includesAll'
	//	| 'excludesAll'
	//	| 'isEmpty'
	//	| 'notEmpty'
	//	| 'sum'
	//	| 'asBag'
	//	| 'asSet'
	//	| 'asSequence'
	//	| 'union'
	//	| 'flatten'
	//	| 'append'
	//	| 'prepend'
	//	| 'insertAt'
	//	| 'subSequence'
	//	| 'at'
	//	| 'indexOf'
	//	| 'first'
	//	| 'last'
	//	| 'including'
	//	| 'excluding';
	public CollectionOperationIDElements getCollectionOperationIDAccess() {
		return pCollectionOperationID;
	}
	
	public ParserRule getCollectionOperationIDRule() {
		return getCollectionOperationIDAccess().getRule();
	}
	
	//IterativeOperationID:
	//	'exists'
	//	| 'forAll'
	//	| 'isUnique'
	//	| 'any'
	//	| 'one'
	//	| 'collect'
	//	| 'select'
	//	| 'reject';
	public IterativeOperationIDElements getIterativeOperationIDAccess() {
		return pIterativeOperationID;
	}
	
	public ParserRule getIterativeOperationIDRule() {
		return getIterativeOperationIDAccess().getRule();
	}
	
	/// **
	// * ********************************************
	// * 					Expressions
	// * ********************************************
	// * 
	// * Using the delegate pattern to respect rule precedence
	// * / OclExpression:
	//	ImpliesOpExp
	//	| LetExp
	//	| UnaryOpExp;
	public OclExpressionElements getOclExpressionAccess() {
		return pOclExpression;
	}
	
	public ParserRule getOclExpressionRule() {
		return getOclExpressionAccess().getRule();
	}
	
	//LetExp OclExpression:
	//	name='let' variable=LocalVariable 'in' in=OclExpression
	public LetExpElements getLetExpAccess() {
		return pLetExp;
	}
	
	public ParserRule getLetExpRule() {
		return getLetExpAccess().getRule();
	}
	
	//UnaryOpExp OclExpression:
	//	name=UnaryOperator target=OclExpression
	public UnaryOpExpElements getUnaryOpExpAccess() {
		return pUnaryOpExp;
	}
	
	public ParserRule getUnaryOpExpRule() {
		return getUnaryOpExpAccess().getRule();
	}
	
	//ImpliesOpExp OclExpression:
	//	XorOpExp ({BoolOpCallExp.source=current} name=ImpliesOperator target=XorOpExp)*
	public ImpliesOpExpElements getImpliesOpExpAccess() {
		return pImpliesOpExp;
	}
	
	public ParserRule getImpliesOpExpRule() {
		return getImpliesOpExpAccess().getRule();
	}
	
	//XorOpExp OclExpression:
	//	OrOpExp ({BoolOpCallExp.source=current} name=XorOperator target=OrOpExp)*
	public XorOpExpElements getXorOpExpAccess() {
		return pXorOpExp;
	}
	
	public ParserRule getXorOpExpRule() {
		return getXorOpExpAccess().getRule();
	}
	
	//OrOpExp OclExpression:
	//	AndOpExp ({BoolOpCallExp.source=current} name=OrOperator target=AndOpExp)*
	public OrOpExpElements getOrOpExpAccess() {
		return pOrOpExp;
	}
	
	public ParserRule getOrOpExpRule() {
		return getOrOpExpAccess().getRule();
	}
	
	//AndOpExp OclExpression:
	//	EqOpExp ({BoolOpCallExp.source=current} name=AndOperator target=EqOpExp)*
	public AndOpExpElements getAndOpExpAccess() {
		return pAndOpExp;
	}
	
	public ParserRule getAndOpExpRule() {
		return getAndOpExpAccess().getRule();
	}
	
	//EqOpExp OclExpression:
	//	ComparisonOpExp ({EqOpCallExp.source=current} name=('<>' | '=') target=ComparisonOpExp)*
	public EqOpExpElements getEqOpExpAccess() {
		return pEqOpExp;
	}
	
	public ParserRule getEqOpExpRule() {
		return getEqOpExpAccess().getRule();
	}
	
	//ComparisonOpExp OclExpression:
	//	AdditionOpExp ({ComOpCallExp.source=current} name=('>' | '<' | '>=' | '<=') target=AdditionOpExp)*
	public ComparisonOpExpElements getComparisonOpExpAccess() {
		return pComparisonOpExp;
	}
	
	public ParserRule getComparisonOpExpRule() {
		return getComparisonOpExpAccess().getRule();
	}
	
	//AdditionOpExp OclExpression:
	//	MultiOpExp ({AddOpCallExp.source=current} name=('+' | '-') target=MultiOpExp)*
	public AdditionOpExpElements getAdditionOpExpAccess() {
		return pAdditionOpExp;
	}
	
	public ParserRule getAdditionOpExpRule() {
		return getAdditionOpExpAccess().getRule();
	}
	
	//MultiOpExp OclExpression:
	//	NavOpExp ({MulOpCallExp.source=current} name=('*' | '/') target=NavOpExp)*
	public MultiOpExpElements getMultiOpExpAccess() {
		return pMultiOpExp;
	}
	
	public ParserRule getMultiOpExpRule() {
		return getMultiOpExpAccess().getRule();
	}
	
	//NavOpExp OclExpression:
	//	NavigationOpCallExp ({NavigationExp.source=current} name=NavigationOperator target=NavigationOpCallExp)*
	public NavOpExpElements getNavOpExpAccess() {
		return pNavOpExp;
	}
	
	public ParserRule getNavOpExpRule() {
		return getNavOpExpAccess().getRule();
	}
	
	//NavigationOpCallExp OclExpression:
	//	OperationCall
	//	| NavigationOrAttributeCall
	//	| IterateExp
	//	| IteratorExp
	//	| CollectionOpCall
	//	| PrimaryExp
	public NavigationOpCallExpElements getNavigationOpCallExpAccess() {
		return pNavigationOpCallExp;
	}
	
	public ParserRule getNavigationOpCallExpRule() {
		return getNavigationOpCallExpAccess().getRule();
	}
	
	//CollectionOpCall OclExpression:
	//	{CollectionOpCallExp} name=CollectionOperationID '(' (arguments+=OclExpression ("," arguments+=OclExpression)*)? ')'
	public CollectionOpCallElements getCollectionOpCallAccess() {
		return pCollectionOpCall;
	}
	
	public ParserRule getCollectionOpCallRule() {
		return getCollectionOpCallAccess().getRule();
	}
	
	//IterateExp OclExpression:
	//	{IterateExp} name='iterate' '(' iterators+=Iterator (',' iterators+=Iterator)* ';' result=LocalVariable '|'
	//	body=OclExpression ')'
	public IterateExpElements getIterateExpAccess() {
		return pIterateExp;
	}
	
	public ParserRule getIterateExpRule() {
		return getIterateExpAccess().getRule();
	}
	
	//Iterator:
	//	name=ID (':' type=OclType)?;
	public IteratorElements getIteratorAccess() {
		return pIterator;
	}
	
	public ParserRule getIteratorRule() {
		return getIteratorAccess().getRule();
	}
	
	//IteratorExp OclExpression:
	//	{IteratorExp} name=IterativeOperationID '(' iterators+=Iterator (',' iterators+=Iterator)* '|' body=OclExpression ')'
	public IteratorExpElements getIteratorExpAccess() {
		return pIteratorExp;
	}
	
	public ParserRule getIteratorExpRule() {
		return getIteratorExpAccess().getRule();
	}
	
	//NavigationOrAttributeCall OclExpression:
	//	{NavigationOrAttributeCall} feature=ID
	public NavigationOrAttributeCallElements getNavigationOrAttributeCallAccess() {
		return pNavigationOrAttributeCall;
	}
	
	public ParserRule getNavigationOrAttributeCallRule() {
		return getNavigationOrAttributeCallAccess().getRule();
	}
	
	//OperationCall OclExpression:
	//	{OperationCall} name=ID '(' (arguments+=OclExpression ("," arguments+=OclExpression)*)? ')'
	public OperationCallElements getOperationCallAccess() {
		return pOperationCall;
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}
	
	//OclModelElementExp OclExpression:
	//	model=OclModel name='::' elements+=ID ('::' elements+=ID)* target=AllInstancesOpCall?
	public OclModelElementExpElements getOclModelElementExpAccess() {
		return pOclModelElementExp;
	}
	
	public ParserRule getOclModelElementExpRule() {
		return getOclModelElementExpAccess().getRule();
	}
	
	//AllInstancesOpCall OclExpression:
	//	{OperationCall} '.' name='allInstances' '(' ')'
	public AllInstancesOpCallElements getAllInstancesOpCallAccess() {
		return pAllInstancesOpCall;
	}
	
	public ParserRule getAllInstancesOpCallRule() {
		return getAllInstancesOpCallAccess().getRule();
	}
	
	//LocalVariable:
	//	name=ID ':' type=OclType '=' initExp=OclExpression;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//PrimaryExp OclExpression:
	//	SeflExp
	//	| NestedExp
	//	| IfExp
	//	| PrimitiveExp
	//	| TupleExp
	//	| LambdaExp
	//	| OclModelElementExp
	public PrimaryExpElements getPrimaryExpAccess() {
		return pPrimaryExp;
	}
	
	public ParserRule getPrimaryExpRule() {
		return getPrimaryExpAccess().getRule();
	}
	
	//LambdaExp OclExpression:
	//	{LambdaExp} name='Lambda' '{' expression=OclExpression '}'
	public LambdaExpElements getLambdaExpAccess() {
		return pLambdaExp;
	}
	
	public ParserRule getLambdaExpRule() {
		return getLambdaExpAccess().getRule();
	}
	
	////CollectionExp returns CollectionExp:
	////	  BagExp |SequenceExp | SetExp | OrderedSetExp 
	////;
	////
	////CollectionPart returns CollectionPart:
	////	CollectionRange | CollectionItem
	////;
	////
	////CollectionItem returns CollectionItem:
	////	item=OclExpression
	////;
	////
	////CollectionRange returns CollectionRange:
	////	first=OclExpression '..' last=OclExpression
	////;
	////
	////BagExp returns BagExp:
	////	{BagExp} 'Bag'  '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
	////;
	////
	////SequenceExp returns SequenceExp : 
	////	{SequenceExp} 'Sequence' '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
	////;
	////
	////SetExp returns SetExp : 
	////	{SetExp} 'Set' '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
	////;
	////
	////OrderedSetExp returns OrderedSetExp : 
	////	{OrderedSetExp} 'OrderedSetExp' '{' parts+=CollectionPart (','parts+=CollectionPart)'}'
	////;
	////MapExp returns OclExpression :
	////	{MapExp} name='Map' '{' elements+=MapElement (',' elements+=MapElement)* '}'
	////;
	////
	////MapElement returns MapElement:
	////	'(' key=OclExpression ',' value=OclExpression ')'
	////;
	////BooleanOpExp returns OclExpression:
	////	PrimaryOclExpression ({BoolOpCallExp.source=current} name=('and' | 'or' | 'xor' | 'implies') target=PrimaryOclExpression)*
	////;
	////
	////PrimaryOclExpression returns OclExpression:
	////	 PrimaryExp 
	////;
	//TupleExp OclExpression:
	//	{TupleExp} name='Tuple' '{' parts+=TuplePart (',' parts+=TuplePart)* '}'
	public TupleExpElements getTupleExpAccess() {
		return pTupleExp;
	}
	
	public ParserRule getTupleExpRule() {
		return getTupleExpAccess().getRule();
	}
	
	//TuplePart:
	//	name=STRING (':' type=OclType)? '=' init=OclExpression;
	public TuplePartElements getTuplePartAccess() {
		return pTuplePart;
	}
	
	public ParserRule getTuplePartRule() {
		return getTuplePartAccess().getRule();
	}
	
	//PrimitiveExp:
	//	NumberExp
	//	| StringExp
	//	| BooleanExp
	//	| UnlimitedNaturalExp
	//	| InvalidExp
	//	| NullExp;
	public PrimitiveExpElements getPrimitiveExpAccess() {
		return pPrimitiveExp;
	}
	
	public ParserRule getPrimitiveExpRule() {
		return getPrimitiveExpAccess().getRule();
	}
	
	//NumberExp NumberLiteralExp:
	//	symbol=INT
	public NumberExpElements getNumberExpAccess() {
		return pNumberExp;
	}
	
	public ParserRule getNumberExpRule() {
		return getNumberExpAccess().getRule();
	}
	
	//StringExp StringLiteralExp:
	//	segments+=STRING+
	public StringExpElements getStringExpAccess() {
		return pStringExp;
	}
	
	public ParserRule getStringExpRule() {
		return getStringExpAccess().getRule();
	}
	
	//BooleanExp BooleanLiteralExp:
	//	symbol='true'
	//	| symbol='false'
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//UnlimitedNaturalExp UnlimitedNaturalLiteralExp:
	//	{UnlimitedNaturalLiteralExp} '*'
	public UnlimitedNaturalExpElements getUnlimitedNaturalExpAccess() {
		return pUnlimitedNaturalExp;
	}
	
	public ParserRule getUnlimitedNaturalExpRule() {
		return getUnlimitedNaturalExpAccess().getRule();
	}
	
	//InvalidExp InvalidLiteralExp:
	//	{InvalidLiteralExp} 'invalid'
	public InvalidExpElements getInvalidExpAccess() {
		return pInvalidExp;
	}
	
	public ParserRule getInvalidExpRule() {
		return getInvalidExpAccess().getRule();
	}
	
	//NullExp NullLiteralExp:
	//	{NullLiteralExp} 'null'
	public NullExpElements getNullExpAccess() {
		return pNullExp;
	}
	
	public ParserRule getNullExpRule() {
		return getNullExpAccess().getRule();
	}
	
	//IfExp:
	//	name='if' condition=OclExpression
	//	'then' then=OclExpression
	//	ifThen+=ElseIfThenExp*
	//	'else' else=OclExpression
	//	'endif';
	public IfExpElements getIfExpAccess() {
		return pIfExp;
	}
	
	public ParserRule getIfExpRule() {
		return getIfExpAccess().getRule();
	}
	
	//ElseIfThenExp OclExpression:
	//	{ElseIfThenExp} name='elseif' condition=OclExpression
	//	'then' then=OclExpression
	public ElseIfThenExpElements getElseIfThenExpAccess() {
		return pElseIfThenExp;
	}
	
	public ParserRule getElseIfThenExpRule() {
		return getElseIfThenExpAccess().getRule();
	}
	
	//SeflExp OclExpression:
	//	{SelfExp} name='self'
	public SeflExpElements getSeflExpAccess() {
		return pSeflExp;
	}
	
	public ParserRule getSeflExpRule() {
		return getSeflExpAccess().getRule();
	}
	
	//NestedExp OclExpression:
	//	{NestedExp} '(' exp=OclExpression ')'
	public NestedExpElements getNestedExpAccess() {
		return pNestedExp;
	}
	
	public ParserRule getNestedExpRule() {
		return getNestedExpAccess().getRule();
	}
	
	//OclType:
	//	StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType | SequenceType | SetType | OclAnyType |
	//	TupleType | OclModelElement | MapType | LambdaType | EnvType;
	public OclTypeElements getOclTypeAccess() {
		return pOclType;
	}
	
	public ParserRule getOclTypeRule() {
		return getOclTypeAccess().getRule();
	}
	
	//OclModelElement OclModelElementExp:
	//	model=OclModel '::' name=ID
	public OclModelElementElements getOclModelElementAccess() {
		return pOclModelElement;
	}
	
	public ParserRule getOclModelElementRule() {
		return getOclModelElementAccess().getRule();
	}
	
	//EnvType:
	//	name='Env' // using the Env variable for indices/
	//;
	public EnvTypeElements getEnvTypeAccess() {
		return pEnvType;
	}
	
	public ParserRule getEnvTypeRule() {
		return getEnvTypeAccess().getRule();
	}
	
	//LambdaType:
	//	name='Lambda' '(' argsTypes+=OclType (',' argsTypes+=OclType)* ')' ':' returnType=OclType;
	public LambdaTypeElements getLambdaTypeAccess() {
		return pLambdaType;
	}
	
	public ParserRule getLambdaTypeRule() {
		return getLambdaTypeAccess().getRule();
	}
	
	//MapType:
	//	name='Map' '(' keyType=OclType ',' valueType=OclType ')';
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//TupleType:
	//	'TupleType';
	public TupleTypeElements getTupleTypeAccess() {
		return pTupleType;
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}
	
	//OclAnyType:
	//	name='OclAny';
	public OclAnyTypeElements getOclAnyTypeAccess() {
		return pOclAnyType;
	}
	
	public ParserRule getOclAnyTypeRule() {
		return getOclAnyTypeAccess().getRule();
	}
	
	//SetType:
	//	name='Set' '(' elementType=OclType ')';
	public SetTypeElements getSetTypeAccess() {
		return pSetType;
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}
	
	//SequenceType:
	//	name='Sequence' '(' elementType=OclType ')';
	public SequenceTypeElements getSequenceTypeAccess() {
		return pSequenceType;
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}
	
	//OrderedSetType:
	//	name='OrderedSet' '(' elementType=OclType ')';
	public OrderedSetTypeElements getOrderedSetTypeAccess() {
		return pOrderedSetType;
	}
	
	public ParserRule getOrderedSetTypeRule() {
		return getOrderedSetTypeAccess().getRule();
	}
	
	//BagType:
	//	name='BagType' '(' elementType=OclType ')';
	public BagTypeElements getBagTypeAccess() {
		return pBagType;
	}
	
	public ParserRule getBagTypeRule() {
		return getBagTypeAccess().getRule();
	}
	
	//RealType:
	//	name='Real';
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}
	
	//IntegerType:
	//	name='Integer';
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//BooleanType:
	//	name='Boolean';
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//StringType:
	//	name='String';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
